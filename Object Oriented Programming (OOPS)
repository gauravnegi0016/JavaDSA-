// 01 Classes & Objects 

/*
    // Object Oriented Programming
*/

/*
    // Classes & Objects
        |           |
        |           |
        |           entities in the real world
        |          
        group of these entities
*/

/*
    // Classes & Objects
        color :
        tip :
        setColor() :
        setTip() :
*/

public class OOPS {
    public static void main(String args[]) {
        Pen p1 = new Pen(); // created a pen object called p1
        p1.setColor("Blue");
        System.out.println(p1.color);
        p1.setTip(5);
        System.out.println(p1.tip);
        // p1.setColor("Yellow");
        p1.color = "Yellow";
        System.out.println(p1.color);
    }
}

class Pen { // prop + funx
    String color;
    int tip;

    void setColor(String newColor) {
        color = newColor;
    }

    void setTip(int newTip) {
        tip =newTip;
    }
}

class Student {
    String name;
    int age;
    float percentage; // cgpa

    void calcPercentage(int phy, int chem, int math) {
        percentage = (phy + chem + math) / 3;
    }
}

// 02 Accrss Modifiers

/*
    // Accrss Modifiers

        Accrss Modifier    within class    within package      outside package by subclass only    outside package
        Private             Y               N                   N                                   N
        Default             Y               Y                   N                                   N
        Protected           Y               Y                   Y                                   N
        Public              Y               Y                   Y                                   Y
*/

public class OOPS {
    public static void main(String args[]) {
        BankAccount myAcc = new BankAccount();
        myAcc.username = "ShradhaKhapra";
        myAcc.setPassword("abcdefghi");
    }
}

class BankAccount {
    public String username;
    private String Password;
    default void setPassword(String pwd) {
        Password = pwd;
    }
}

// 03 Getters & Setters

/*
    // Getters & Setters
        Get : to return the value
        Set : to modify the value

        this : this keyword is used to refer to 
        the current object 
*/

public class OOPS {
    public static void main(String args[]) {
        Pen p1 = new Pen();
        p1.setColor("Blue");
        System.out.println(p1.getColor());
        p1.setTip(5);
        System.out.println(p1.getTip());
        // p1.setColor("Yellow");
        p1.setColor("Yellow");
        System.out.println(p1.getColor());
    }
}

class Pen {
    private String color;
    int tip;

    int getColor() {
        return this.color;
    }

    int getTip() {
        return this.tip;
    }
    
    void setColor(String newColor) {
        this.color = newColor;
    }

    void setTip(int tip) {
        this.tip = tip;;
    }
}

// 04 Encapsulation

/*
    // Encapsulation
        Encapsulation is defined as the wrapping up of data & methods under a
        single unit. It also implements data hiding.
*/

// 05 Constructors

/*
    // Constructors
        Constructor is a special method which is invoked automatically at the 
        time of abject creation.

        - Constructors have the same name as class or structure.
        - Constructors don't have a return type. (Not even void)
        - Constructors are only called once, at object creation.
        - Memory allocation happens when constructor is called. 
*/

public class OOPS {
    public static void main(String args[]) {
        Student s1 = new Student("Shradha");
        System.out.println(s1.name);
    }
}

class Student {
    String name;
    int roll;

    Student(String name) {
        this.name = name;
    }
}

public class OOPS {
    public static void main(String args[]) {
        Student s1 = new Student();
    }
}

class Student {
    String name;
    int roll;

    Student() {
        System.out.println("constructor is called...");
    }
}

// 06 Type of Constructors

/*
    // Type of Constructors
    
    Non-parameterized

    Parameterized

    Copy Constructor
*/

public class OOPS {
    public static void main(String args[]) {
        Student s1 = new Student();
        Student s2 = new Student(Shradha);
        Student s3 = new Student(123);
    }
}

class Student {
    String name;
    int roll;

    Student() {
        System.out.println("constructor is called...");
    }
    Student(String name) {
        this.name = name;
    }
    Student(int roll) {
        this.roll = roll;
    }
}

// 07 Copy Constructor

/*
    // Copy Constructors
*/

public class OOPS {
    public static void main(String args[]) {
        Student s1 = new Student();
        s1.name = "shradha";
        s1.roll = 456;
        s1.Password =  "abcd";
        s1.marks[0] = 100;
        s1.marks[1] = 90;
        s1.marks[2] = 80;

        Student s2 = new Student(s1); // copy
        s2.Password = "xyz";
        s1.marks[2] = 100;
        for(int 1=0; 1<3; i++) {
            System.out.println(s2.marks[i]);
        }
    }
}

class Student {
    String name;
    int roll;
    String Password;
    int marks[];
    

    class Address {
        String city;
    }

    // copy constructor
    Student(Student s1) {
        marks[] = new int[3];
        this.name = s1.name;
        this.roll = s1.roll;
        this.marks = s1.marks;
    }

    Student() {
        marks[] = new int[3];
        System.out.println("constructor is called...");
    }
    Student(String name) {
        marks[] = new int[3];
        this.name = name;
    }
    Student(int roll) {
        marks[] = new int[3];
        this.roll = roll;
    }
}

// 08 Shallow & Deep Copy

/*
    // Shallow & Deep Copy
*/

public class OOPS {
    public static void main(String args[]) {
        Student s1 = new Student();
        s1.name = "shradha";
        s1.roll = 456;
        s1.Password =  "abcd";
        s1.marks[0] = 100;
        s1.marks[1] = 90;
        s1.marks[2] = 80;

        Student s2 = new Student(s1); // copy
        s2.Password = "xyz";
        s1.marks[2] = 100;
        for(int 1=0; 1<3; i++) {
            System.out.println(s2.marks[i]);
        }
    }
}

class Student {
    String name;
    int roll;
    String Password;
    int marks[];
    

    class Address {
        String city;
    }

    // // shallow copy constructor
    // Student(Student s1) {
    //     marks[] = new int[3];
    //     this.name = s1.name;
    //     this.roll = s1.roll;
    //     this.marks = s1.marks;
    // }

    // deep copy constructor
    Student(Student s1) {
        marks[] = new int[3];
        this.name = s1.name;
        this.roll = s1.roll;
        for(int i=0; i<marks.length; i++) {
            this.marks[i] = s1.marks[i];
        }
    }

    Student() {
        marks[] = new int[3];
        System.out.println("constructor is called...");
    }
    Student(String name) {
        marks[] = new int[3];
        this.name = name;
    }
    Student(int roll) {
        marks[] = new int[3];
        this.roll = roll;
    }
}

// 09 Destructors

/*
    // Destructors
*/

// 10 Inheritance

/*
    // Inheritance
        Inheritance is when properties & methods of base class are
        passed on to a derived class.
*/

public class OOPS {
    public static void main(String args[]) {
        Fish shark = new Fish();
        shark.eat();
    }
}

// Base class 
class Animal {
    String color;
    void eat() {
        System.out.println("eats");
    }

    void breathe() {
        System.out.println("breathes");
    }
}

// Derived class // subclass
class Fish extends Animal {
    int fins;

    void swim() {
        System.out.println("swims in water");
    }
}

// 11 Single level Inheritance

/*
    // Types of Inheritance 

        Single Level Inheritance

            Base Class
                |
                |
            Derived Class
*/

// 12 Multi level Inheritance

/*
    // Types of Inheritance 

        Multi Level Inheritance

            Base Class
                |
                |
            Derived Class
                |
                |
            Derived Class
*/

public class OOPS {
    public static void main(String args[]) {
        Dog dobby = new Dog();
        dobby.eat();
        dobby.legs = 4;
        System.out.println(dobby.legs);
    }
}

// Base class 
class Animal {
    String color;
    void eat() {
        System.out.println("eats");
    }

    void breathe() {
        System.out.println("breathes");
    }
}

class Mammal extands Animal {
    int legs;
}

class Dog extands Mammal {
    String breed;
}

// 13 Hierarchial Inheritance

/*
    // Types of Inheritance 

        Hierarchial Inheritance

                Base Class
                    /\
                   /  \
                  /    \
        Derived Class   Derived Class
*/

public class OOPS {
    public static void main(String args[]) {
        Dog dobby = new Dog();
        dobby.eat();
        dobby.legs = 4;
        System.out.println(dobby.legs);
    }
}

// Base class 
class Animal {
    String color;
    void eat() {
        System.out.println("eats");
    }

    void breathe() {
        System.out.println("breathes");
    }
}

class Mammal extands Animal {
    void walk() {
        System.out.println("walks");
    }
}

class Fish extands Animal {
    void swim() {
        System.out.println("swim");
    }
}

class Bird extands Animal {
    void fly() {
        System.out.println("fly");
    }
}

// 14 Hybrid Inheritance

/*
    // Types of Inheritance

        Hybrid Inheritance

            ______
              /\
             /  \
        ______  ______
                   |
                   |
                ______
*/

// 15 Polymorphism

/*
    // Polymorphism
        - compile Time Polymorphism
            Method Overloading

        - Run Time Polymorphism
            Method Overriding
*/

// 16 Method Overloading

/*
    // Method Overloading
        Multiple functions with the same name but different
        parameters
*/

public class OOPS {
    public static void main(String args[]) {
        Calculator calc = new Calculator();
        System.out.println(calc.sum(1, 2));
        System.out.println(calc.sum((float)1.5, (float)2.5));
        System.out.println(calc.sum(1, 2, 3));
    }
}

class Calculator {
    int sum(int a, int b) {
        return a+b;
    }
    float sum(float a, float b) {
        return a+b;
    }
    int sum(int a, int b, int c) {
        return a+b+c;
    }
}

// 17 Method Overriding

/*
    // Method Overriding
        Parent and dhild classes both contain tha same function with a
        different definition.
*/

public class OOPS {
    public static void main(String args[]) {
        Deer d = new Deer();
            d.eat();
    }
}

class Animal {
    void eat() {
        System.out.println("eats anything");
    }
}

class Deer extends Animal {
    void eat() {
        System.out.println("eats grass");
    }
}

// 18 Packages in Java

/*
    // Packages in Java
        Package is a group of similar types of classes, interfaces
        and sub-packages.
*/

package myPackage;

import java.util.*;

public class OOPS {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        System.out.println(a);
    }
}

// 19 Abstraction

/*
    // Abstraction
        Hiding all the unnecessary details and showing only the
        important parts to the user.
                    /           \
                   /             \
            Abstract Classes    Interfaces
*/

// 20 Abstract Classes 

/*
    // Abstract Classes
        - Cannot create an instance class

        - Can have abstract/non-abstract methods

        - Can have constructors 
*/

public class OOPS {
    public static void main(String args[]){

    }
}

abstract class Animal {
    void eat() {
        System.out.ptintln("animal eats");
    }
    abstract void walk();
}

class Horse extend Animal {
    void walk() {
        System.out.println("walks on 4 legs");
    }
}


